name: DevSecOps Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-secure:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup Java (for Spring Boot)
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      # Setup Node.js (for React frontend)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # Cache Maven for Spring Boot
      - name: Cache Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Cache Node modules for React
      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install backend dependencies & build
      - name: Build Spring Boot Backend
        run: mvn clean package -DskipTests

      # Install frontend dependencies & build
      - name: Build React Frontend
        run: |
          cd frontend
          npm ci
          npm run build

      # Run backend unit tests
      - name: Run Spring Boot Tests
        run: mvn test

      # Install Trivy for security scanning
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh

      # Security scan of backend & frontend
      - name: Security Scan with Trivy
        run: trivy fs --exit-code 1 --severity HIGH,CRITICAL .

      # Optional: Build Docker image for deployment
      - name: Build Docker Image
        run: |
          docker build -t student-portal-app .

      # Optional: Push Docker image to registry
      # - name: Docker Login
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      # - run: docker push student-portal-app:latest
